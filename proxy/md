# Proxy Protocol Spec

Defines a "proxy" resource which can be commanded to issue subsequent requests using configuration supplied in its inbound request.


## Definitions

- "Inbound Request" (In): the request received by the proxy server which initiates the behaviors
- "Subsequent Request" (Subseq): the request generated by the proxy server according to the In
- "Intended Subsequent Request" (Intended Subseq): the request described by the In request to be proxied


## Requirements

### Resource Behaviors

If the In request includes a path:

- SHOULD issue a new request (the Subseq) based on the In request, then respond to the In with content based on the Subseq response
- MUST append a self-describing entry to the Subseq request's Via header
- MUST append a self-describing entry to the In response's Via header
- MUST only populate In's response with information related to the Subseq request

If the In request does not include a path:

- SHOULD populate In's response with information related to the proxy resource

### Definitions

- MUST define the Intended Subseq request URL as: the path of the In request
- MUST define all other parameters of the Intended Subseq as: the parameters of the In request


## Comments

In this protocol, the URI describes a resource stack (eg `http://a.com/http://b.com/http://c.com`). By using the "path" as the Intended Subseq URL, a server will automatically "pop" itself from the stack (eg `http://a.com` will issue `http://b.com/http://c.com`).

The proxy resource's sole expected behavior is to act as a proxy to another resource when a path is given. Its response describes a composite of each resource in the stack, with primary meaning derived from the terminal URL (eg `http://c.com`). Proxy resources should not add meta-data (such as links) describing themselves when they are proxying- that should only happen when no path is given (eg `http://a.com`, not `http://a.com/http://b.com`).

Note that the proxy is expected to continue the stack as directed, but may not necessarily do so. That is, in `http://a.com/http://b.com`, the `a.com` resource may choose to target `http://c.com` instead. Doing so breaks expectation, and so should be well-motivated.